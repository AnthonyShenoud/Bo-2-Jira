name: Sync Jira Issues to GitHub

on:
  workflow_dispatch:

jobs:
  sync-jira:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install jq and GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Authenticate GitHub CLI
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
        run: |
          echo "$GH_PERSONAL_ACCESS_TOKEN" | gh auth login --with-token

      - name: Fetch Jira Issues
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_DOMAIN: "anthonyashenouda.atlassian.net"
          JIRA_PROJECT_KEY: "SCRUM"
          JIRA_USER: "anthony.ashenouda@gmail.com"
        run: |
          echo "Fetching Jira issues..."
          response=$(curl -s -X GET -u "$JIRA_USER:$JIRA_API_TOKEN" \
            -H "Accept: application/json" \
            "https://$JIRA_DOMAIN/rest/api/2/search?jql=project=$JIRA_PROJECT_KEY")
          echo "$response" | jq '[.issues[] | {
            id: .id,
            key: .key,
            title: .fields.summary,
            body: (.fields.description // "No Description"),
            due_date: (.fields.duedate // "No Due Date"),
            input: (.fields.customfield_10039 // "No Input"),
            output: (.fields.customfield_10040 // "No Output"),
            priority: (.fields.priority.name // "No Priority"),
            team: (.fields.team.name // "No Team"),
            status: (.fields.status.name // "No Status"),
            assignee: (.fields.assignee.accountId // "Unassigned"),
            updated: .fields.updated
          }]' > jira_issues.json

      - name: Debug Jira JSON Content
        run: cat jira_issues.json

      - name: Create GitHub Issues
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          REPO: "AnthonyShenoud/Bo-2-Jira"
          PROJECT_ID: "PVT_kwHOBF3sMs4A1ZhT"
          STATUS_FIELD_ID: "PVTSSF_lAHOBF3sMs4A1ZhTzgq4Do0"
        run: |
          declare -A STATUS_MAP=(
            ["backlog"]="f75ad846"
            ["ready"]="61e4505c"
            ["todo"]="61e4505c"
            ["to do"]="61e4505c"
            ["inprogress"]="47fc9ee4"
            ["inreview"]="df73e18b"
            ["review"]="df73e18b"
            ["done"]="98236657"
            ["closed"]="98236657"
            ["resolved"]="98236657"
          )

          declare -A USER_MAP=(
            ["712020:adc4902f-4b9b-4ee1-a517-5d24a6fd51a6"]="AnthonyShenoud"
            ["712020:b41cbe18-4f26-468d-a2c0-8a4331eef3a1"]="TintinShenouda"
            ["712020:9c9704fc-f1a0-49c9-9f9e-3bf543da02c7"]="MariaCampagnolo"
          )

          jq -c '.[]' jira_issues.json | while read -r issue; do
            title=$(echo "$issue" | jq -r '.title')
            jira_key=$(echo "$issue" | jq -r '.key')
            body=$(echo "$issue" | jq -r '.body')
            due_date=$(echo "$issue" | jq -r '.due_date')
            input=$(echo "$issue" | jq -r '.input')
            output=$(echo "$issue" | jq -r '.output')
            team=$(echo "$issue" | jq -r '.team')
            priority=$(echo "$issue" | jq -r '.priority')
            status=$(echo "$issue" | jq -r '.status' | tr '[:upper:]' '[:lower:]' | tr -d ' ')
            assignee=$(echo "$issue" | jq -r '.assignee')
            github_username="${USER_MAP[$assignee]}"

            # Set GitHub assignees
            assignees_json="[]"
            if [[ -n "$github_username" ]]; then
              assignees_json=$(jq -n --arg u "$github_username" '[ $u ]')
            fi

            # GitHub issue title includes Jira key
            github_title="[$jira_key] $title"

            current_issue=$(gh issue list --repo "$REPO" --search "$jira_key" --state "all" --json number,title,updatedAt | jq -c ".[] | select(.title | contains(\"[$jira_key]\"))")
            
            existing_issue=$(echo "$current_issue" | jq -r '.number')
            github_updated_at=$(echo "$current_issue" | jq -r '.updatedAt')

            jira_updated=$(echo "$issue" | jq -r '.updated')

            echo "üìÖ Jira updated at: $jira_updated"
            echo "üìÖ GitHub updated at: $github_updated_at"
            
            # Convert timestamps to Unix epoch for comparison
            jira_epoch=$(date -d "$jira_updated" +%s)
            github_epoch=$(date -d "$github_updated_at" +%s)
            
            if [[ "$jira_epoch" -le "$github_epoch" ]]; then
              echo "‚úÖ No update needed (Jira is older or same as GitHub)."
              continue
            else
              echo "‚è´ Jira issue is newer. Will update."
            fi


            if [[ -n "$existing_issue" ]]; then
              echo "üîÑ Issue [$jira_key] already exists as #$existing_issue. Checking for updates..."

              # Fetch Jira comments
              jira_comments=$(curl -s -u "$JIRA_USER:$JIRA_API_TOKEN" \
                -H "Accept: application/json" \
                "https://$JIRA_DOMAIN/rest/api/2/issue/$jira_key/comment?orderBy=-created&maxResults=1")
              
              # Extract latest comment body (plain text)
              latest_comment=$(echo "$jira_comments" | jq -r '
                .comments[0].body.content
                | map(
                    if .type == "paragraph" then
                      (.content | map(.text) | join(""))
                    else
                      ""
                    end
                  )
                | join("\n\n")
                ')

              echo "üßæ Raw Jira comment JSON:"
              echo "$jira_comments" | jq '.comments[0].body'

                
              echo "$jira_comments" | jq '.comments[0].body'
              echo "$jira_comments" | jq -r '
                .comments[0].body.content
                | map(
                    if .type == "paragraph" then
                      (.content | map(.text) | join(""))
                    else
                      ""
                    end
                  )
                | join("\n\n")
                '

              
              # Fetch latest GitHub comment (safely)
              last_gh_comment=$(gh issue view "$existing_issue" --repo "$REPO" --json comments | jq -r '.comments[-1].body // ""')
              
              # Normalize for comparison
              normalized_jira=$(echo "$latest_comment" | tr -s '[:space:]' ' ')
              normalized_gh=$(echo "$last_gh_comment" | tr -s '[:space:]' ' ')
              
              # Post if different
              if [[ -n "$normalized_jira" && "$normalized_jira" != "$normalized_gh" ]]; then
                echo "üí¨ Posting latest Jira comment to GitHub..."
                gh issue comment "$existing_issue" --repo "$REPO" \
                  --body "üí¨ Comment from Jira:\n\n$latest_comment"
              else
                echo "üí¨ No new Jira comment to sync."
              fi


            
              # Fetch current GitHub issue details
              current_issue=$(gh issue view "$existing_issue" --repo "$REPO" --json title,body,assignees)
              current_title=$(echo "$current_issue" | jq -r '.title')
              current_body=$(echo "$current_issue" | jq -r '.body')
              current_assignees=$(echo "$current_issue" | jq -r '[.assignees[].login] | join(",")')
            
              # Format desired content
              desired_title="[$jira_key] $title"
              desired_body="üîó Jira issue: https://$JIRA_DOMAIN/browse/$jira_key\n\n### Jira: $jira_key\n\n**Description**: $body\n\n**Due**: $due_date\n**Input**: $input\n**Output**: $output\n**Team**: $team\n**Priority**: $priority"
              desired_assignees=$(echo "$assignees_json" | jq -r 'join(",")')
            
              # Compare and update if different
              update_needed=false
            
              [[ "$current_title" != "$desired_title" ]] && update_needed=true
              [[ "$current_body" != "$desired_body" ]] && update_needed=true
              [[ "$current_assignees" != "$desired_assignees" ]] && update_needed=true
              
              # Get latest GitHub comment
              echo "üîç Jira raw comment doc:"
              echo "$jira_comments" | jq '.comments[-1].body'
              echo "üîç Parsed latest_comment: <<<$latest_comment>>>"
              
              # Get latest GitHub comment
              last_gh_comment=$(gh issue view "$existing_issue" --repo "$REPO" --json comments --jq '.comments[-1].body')
              echo "üîç Last GitHub comment: <<<$last_gh_comment>>>"
          
              if [[ "$update_needed" == true ]]; then
                echo "‚úèÔ∏è Updating GitHub issue #$existing_issue..."
            
              # Clear old assignees first
              for old_user in $(echo "$current_assignees" | tr ',' ' '); do
                gh issue edit "$existing_issue" --repo "$REPO" --remove-assignee "$old_user"
              done
              
              # Add new assignees
              for new_user in $(echo "$desired_assignees" | tr ',' ' '); do
                gh issue edit "$existing_issue" --repo "$REPO" --add-assignee "$new_user"
              done
              
              # Update title and body
              gh issue edit "$existing_issue" --repo "$REPO" \
                --title "$desired_title" \
                --body "$desired_body"

            
                echo "‚úÖ Issue #$existing_issue updated."
                gh issue comment "$existing_issue" \
                  --repo "$REPO" \
                  --body "üîÅ Synced with Jira ticket [$jira_key](https://$JIRA_DOMAIN/browse/$jira_key)"

                      echo "üîÑ Updating project status for issue #$existing_issue..."

                      issue_node_id=$(gh issue view "$existing_issue" --repo "$REPO" --json node_id --jq '.node_id')
                  
                      item_id=$(gh api graphql -f query='
                        query($projectId: ID!, $issueId: ID!) {
                          node(id: $issueId) {
                            ... on Issue {
                              projectItems(first: 10) {
                                nodes {
                                  id
                                  project {
                                    id
                                  }
                                }
                              }
                            }
                          }
                        }' -F projectId="$PROJECT_ID" -F issueId="$issue_node_id" --jq '.node.projectItems.nodes[0].id')
                  
                      if [[ -z "$item_id" || "$item_id" == "null" ]]; then
                        echo "‚ö†Ô∏è Could not find project item ID for issue #$existing_issue"
                      else
                        status_option_id="${STATUS_MAP[$status]}"
                        if [[ -n "$status_option_id" ]]; then
                          gh api graphql --silent -f query='
                            mutation (
                              $project: ID!
                              $item: ID!
                              $status_field: ID!
                              $status_value: String!
                            ) {
                              set_status: updateProjectV2ItemFieldValue(input: {
                                projectId: $project
                                itemId: $item
                                fieldId: $status_field
                                value: {
                                  singleSelectOptionId: $status_value
                                }
                              }) {
                                projectV2Item {
                                  id
                                }
                              }
                            }' \
                            -f project="$PROJECT_ID" \
                            -f item="$item_id" \
                            -f status_field="$STATUS_FIELD_ID" \
                            -f status_value="$status_option_id"
                          echo "‚úÖ Project status updated for issue #$existing_issue"
                        else
                          echo "‚ö†Ô∏è No matching status option for Jira status '$status'. Skipping status update."
                        fi
                      fi
              else
                echo "‚úÖ No update needed for issue #$existing_issue."
              fi
            
              continue
            fi
            

            echo "Creating GitHub issue for: $github_title"

            issue_payload=$(jq -n \
              --arg title "$github_title" \
              --arg body "üîó Jira issue: https://$JIRA_DOMAIN/browse/$jira_key\n\n### Jira: $jira_key\n\n**Description**: $body\n\n**Due**: $due_date\n**Input**: $input\n**Output**: $output\n**Team**: $team\n**Priority**: $priority" \
              --argjson assignees "$assignees_json" \
              '{title: $title, body: $body, assignees: $assignees}')


            issue_response=$(curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/$REPO/issues \
              -d "$issue_payload")

            issue_node_id=$(echo "$issue_response" | jq -r '.node_id')
            issue_url=$(echo "$issue_response" | jq -r '.html_url')
            
            echo "‚úÖ Created GitHub issue: $issue_url"
            
            # ‚ûï Add comment to Jira with backlink to GitHub issue
            issue_number=$(echo "$issue_url" | grep -oE '[0-9]+$')
            
            gh issue comment "$issue_number" \
              --repo "$REPO" \
              --body "üîÅ Synced with Jira ticket [$jira_key](https://$JIRA_DOMAIN/browse/$jira_key)"


            if [[ "$issue_node_id" == "null" || -z "$issue_node_id" ]]; then
              echo "‚ö†Ô∏è Failed to create GitHub issue for $jira_key"
              continue
            fi

            echo "‚úÖ Created GitHub issue: $issue_url"

            item_id=$(gh api graphql -f query='
              mutation($projectId:ID!, $contentId:ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item { id }
                }
              }' -F projectId="$PROJECT_ID" -F contentId="$issue_node_id" --jq '.data.addProjectV2ItemById.item.id')

            if [[ -z "$item_id" || "$item_id" == "null" ]]; then
              echo "‚ùå Failed to add issue to project. Skipping."
              continue
            fi

            status_option_id="${STATUS_MAP[$status]}"
            if [[ -z "$status_option_id" ]]; then
              echo "‚ö†Ô∏è No valid status mapping for '$status'. Skipping status update."
              continue
            fi

            echo "üîç Debugging GitHub project update:"
            echo "  Project ID: $PROJECT_ID"
            echo "  Item ID: $item_id"
            echo "  Status Field ID: $STATUS_FIELD_ID"
            echo "  Status Option ID: $status_option_id"

            echo "üß™ Trying to set status for item $item_id to '$status' ‚Üí option_id $status_option_id"

            update_status_response=$(gh api graphql --silent -f query='
              mutation (
                $project: ID!
                $item: ID!
                $status_field: ID!
                $status_value: String!
              ) {
                set_status: updateProjectV2ItemFieldValue(input: {
                  projectId: $project
                  itemId: $item
                  fieldId: $status_field
                  value: {
                    singleSelectOptionId: $status_value
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }' \
              -f project="$PROJECT_ID" \
              -f item="$item_id" \
              -f status_field="$STATUS_FIELD_ID" \
              -f status_value="$status_option_id" 2>&1 || true)


            echo "GraphQL raw response:"
            echo "$update_status_response" | jq .

            
            if [[ $? -ne 0 || -z "$update_status_response" || "$update_status_response" == *"errors"* ]]; then
              echo "‚ö†Ô∏è Failed to update status for item $item_id. Skipping."
              echo "üî¥ Error details: $update_status_response"
              continue
            fi
            
            echo "‚úÖ Status set to '$status'"

          done
        shell: bash {0}
