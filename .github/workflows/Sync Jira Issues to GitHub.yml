name: Sync Jira Issues to GitHub

on:
  workflow_dispatch:

jobs:
  sync-jira:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install jq and GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Authenticate GitHub CLI
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
        run: |
          echo "$GH_PERSONAL_ACCESS_TOKEN" | gh auth login --with-token

      - name: Fetch Jira Issues
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_DOMAIN: "anthonyashenouda.atlassian.net"
          JIRA_PROJECT_KEY: "SCRUM"
          JIRA_USER: "anthony.ashenouda@gmail.com"
        run: |
          echo "Fetching Jira issues..."
          response=$(curl -s -X GET -u "$JIRA_USER:$JIRA_API_TOKEN" \
            -H "Accept: application/json" \
            "https://$JIRA_DOMAIN/rest/api/2/search?jql=project=$JIRA_PROJECT_KEY")
          echo "$response" | jq '[.issues[] | {
            id: .id,
            key: .key,
            title: .fields.summary,
            body: (.fields.description // "No Description"),
            due_date: (.fields.duedate // "No Due Date"),
            input: (.fields.customfield_10039 // "No Input"),
            output: (.fields.customfield_10040 // "No Output"),
            priority: (.fields.priority.name // "No Priority"),
            team: (.fields.team.name // "No Team"),
            status: (.fields.status.name // "No Status"),
            assignee: (.fields.assignee.accountId // "Unassigned"),
            updated: .fields.updated
          }]' > jira_issues.json

      - name: Sync Issues to GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          REPO: "AnthonyShenoud/Bo-2-Jira"
          PROJECT_ID: "PVT_kwHOBF3sMs4A1ZhT"
          STATUS_FIELD_ID: "PVTSSF_lAHOBF3sMs4A1ZhTzgq4Do0"
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_DOMAIN: "anthonyashenouda.atlassian.net"
          JIRA_USER: "anthony.ashenouda@gmail.com"
        run: |
          declare -A STATUS_MAP=(
            ["backlog"]="f75ad846"
            ["ready"]="61e4505c"
            ["todo"]="61e4505c"
            ["to do"]="61e4505c"
            ["inprogress"]="47fc9ee4"
            ["inreview"]="df73e18b"
            ["review"]="df73e18b"
            ["done"]="98236657"
            ["closed"]="98236657"
            ["resolved"]="98236657"
          )

          declare -A USER_MAP=(
            ["712020:adc4902f-4b9b-4ee1-a517-5d24a6fd51a6"]="AnthonyShenoud"
            ["712020:b41cbe18-4f26-468d-a2c0-8a4331eef3a1"]="TintinShenouda"
            ["712020:9c9704fc-f1a0-49c9-9f9e-3bf543da02c7"]="MariaCampagnolo"
          )

          jq -c '.[]' jira_issues.json | while read -r issue; do
            title=$(echo "$issue" | jq -r '.title')
            jira_key=$(echo "$issue" | jq -r '.key')
            body=$(echo "$issue" | jq -r '.body')
            due_date=$(echo "$issue" | jq -r '.due_date')
            input=$(echo "$issue" | jq -r '.input')
            output=$(echo "$issue" | jq -r '.output')
            team=$(echo "$issue" | jq -r '.team')
            priority=$(echo "$issue" | jq -r '.priority')
            status=$(echo "$issue" | jq -r '.status' | tr '[:upper:]' '[:lower:]' | tr -d ' ')
            assignee=$(echo "$issue" | jq -r '.assignee')
            github_username="${USER_MAP[$assignee]}"

            # Set GitHub assignees
            assignees_json="[]"
            if [[ -n "$github_username" ]]; then
              assignees_json=$(jq -n --arg u "$github_username" '[ $u ]')
            fi

            github_title="[$jira_key] $title"

            current_issue=$(gh issue list --repo "$REPO" --search "$jira_key" --state "all" --json number,title,updatedAt | jq -c ".[] | select(.title | contains(\"[$jira_key]\"))")

            existing_issue=$(echo "$current_issue" | jq -r '.number')
            github_updated_at=$(echo "$current_issue" | jq -r '.updatedAt')
            jira_updated=$(echo "$issue" | jq -r '.updated')

            echo "üìÖ Jira updated at: $jira_updated"
            echo "üìÖ GitHub updated at: $github_updated_at"

            jira_epoch=$(date -d "$jira_updated" +%s)
            github_epoch=$(date -d "$github_updated_at" +%s)

            if [[ "$jira_epoch" -le "$github_epoch" ]]; then
              echo "‚úÖ No update needed (Jira is older or same)."
              continue
            fi

            echo "‚è´ Jira issue is newer. Will update."

            if [[ -n "$existing_issue" ]]; then
              echo "üîÑ Issue [$jira_key] exists as #$existing_issue. Checking for updates..."

              # Always check Jira comments
              jira_comments=$(curl -s -u "$JIRA_USER:$JIRA_API_TOKEN" \
                -H "Accept: application/json" \
                "https://$JIRA_DOMAIN/rest/api/2/issue/$jira_key/comment")
              latest_comment=$(echo "$jira_comments" | jq -r '
                .comments[-1].body.content
                  | map(.content // []) 
                  | flatten
                  | map(select(.text != null).text)
                  | join("")
              ')
              last_gh_comment=$(gh issue view "$existing_issue" --repo "$REPO" --json comments --jq '.comments[-1].body')

              if [[ -n "$latest_comment" && "$latest_comment" != "$last_gh_comment" ]]; then
                echo "üí¨ New Jira comment found. Posting to GitHub..."
                gh issue comment "$existing_issue" --repo "$REPO" \
                  --body "üí¨ Comment from Jira:\n\n$latest_comment"
              else
                echo "üí¨ No new Jira comment to sync."
              fi

              # Check for metadata updates
              current_data=$(gh issue view "$existing_issue" --repo "$REPO" --json title,body,assignees)
              current_title=$(echo "$current_data" | jq -r '.title')
              current_body=$(echo "$current_data" | jq -r '.body')
              current_assignees=$(echo "$current_data" | jq -r '[.assignees[].login] | join(",")')

              desired_title="$github_title"
              desired_body="üîó Jira issue: https://$JIRA_DOMAIN/browse/$jira_key\n\n### Jira: $jira_key\n\n**Description**: $body\n\n**Due**: $due_date\n**Input**: $input\n**Output**: $output\n**Team**: $team\n**Priority**: $priority"
              desired_assignees=$(echo "$assignees_json" | jq -r 'join(",")')

              update_needed=false
              [[ "$current_title" != "$desired_title" ]] && update_needed=true
              [[ "$current_body" != "$desired_body" ]] && update_needed=true
              [[ "$current_assignees" != "$desired_assignees" ]] && update_needed=true

              if [[ "$update_needed" == true ]]; then
                echo "‚úèÔ∏è Updating GitHub issue #$existing_issue..."
                for old_user in $(echo "$current_assignees" | tr ',' ' '); do
                  gh issue edit "$existing_issue" --repo "$REPO" --remove-assignee "$old_user"
                done
                for new_user in $(echo "$desired_assignees" | tr ',' ' '); do
                  gh issue edit "$existing_issue" --repo "$REPO" --add-assignee "$new_user"
                done
                gh issue edit "$existing_issue" --repo "$REPO" \
                  --title "$desired_title" \
                  --body "$desired_body"

                gh issue comment "$existing_issue" --repo "$REPO" \
                  --body "üîÅ Synced with Jira ticket [$jira_key](https://$JIRA_DOMAIN/browse/$jira_key)"
              else
                echo "‚úÖ No metadata update needed."
              fi
            fi
          done
