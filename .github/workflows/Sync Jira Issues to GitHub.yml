name: Sync Jira Issues to GitHub

on:
  workflow_dispatch:

jobs:
  sync-jira:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install jq and GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Authenticate GitHub CLI
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
        run: |
          echo "$GH_PERSONAL_ACCESS_TOKEN" | gh auth login --with-token

      - name: Fetch Jira Issues
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_DOMAIN: "anthonyashenouda.atlassian.net"
          JIRA_PROJECT_KEY: "SCRUM"
          JIRA_USER: "anthony.ashenouda@gmail.com"
        run: |
          echo "Fetching Jira issues..."
          response=$(curl -s -X GET -u "$JIRA_USER:$JIRA_API_TOKEN" \
            -H "Accept: application/json" \
            "https://$JIRA_DOMAIN/rest/api/2/search?jql=project=$JIRA_PROJECT_KEY")
          echo "$response" | jq '[.issues[] | {
            id: .id,
            key: .key,
            title: .fields.summary,
            body: (.fields.description // "No Description"),
            due_date: (.fields.duedate // "No Due Date"),
            input: (.fields.customfield_10039 // "No Input"),
            output: (.fields.customfield_10040 // "No Output"),
            priority: (.fields.priority.name // "No Priority"),
            team: (.fields.team.name // "No Team"),
            status: (.fields.status.name // "No Status"),
            assignee: (.fields.assignee.accountId // "Unassigned")
          }]' > jira_issues.json

      - name: Debug Jira JSON Content
        run: cat jira_issues.json

      - name: Create GitHub Issues
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          REPO: "AnthonyShenoud/Bo-2-Jira"
          PROJECT_ID: "PVT_kwHOBF3sMs4A1ZhT"
          STATUS_FIELD_ID: "PVTSSF_lAHOBF3sMs4A1ZhTzgq4Do0"
        run: |
          declare -A STATUS_MAP=(
            ["backlog"]="f75ad846"
            ["ready"]="61e4505c"
            ["todo"]="61e4505c"
            ["to do"]="61e4505c"
            ["inprogress"]="47fc9ee4"
            ["inreview"]="df73e18b"
            ["review"]="df73e18b"
            ["done"]="98236657"
            ["closed"]="98236657"
            ["resolved"]="98236657"
          )

          declare -A USER_MAP=(
            ["712020:adc4902f-4b9b-4ee1-a517-5d24a6fd51a6"]="AnthonyShenoud"
            ["712020:b41cbe18-4f26-468d-a2c0-8a4331eef3a1"]="TintinShenouda"
            ["712020:9c9704fc-f1a0-49c9-9f9e-3bf543da02c7"]="MariaCampagnolo"
          )

          jq -c '.[]' jira_issues.json | while read -r issue; do
            title=$(echo "$issue" | jq -r '.title')
            jira_key=$(echo "$issue" | jq -r '.key')
            body=$(echo "$issue" | jq -r '.body')
            due_date=$(echo "$issue" | jq -r '.due_date')
            input=$(echo "$issue" | jq -r '.input')
            output=$(echo "$issue" | jq -r '.output')
            team=$(echo "$issue" | jq -r '.team')
            priority=$(echo "$issue" | jq -r '.priority')
            status=$(echo "$issue" | jq -r '.status' | tr '[:upper:]' '[:lower:]' | tr -d ' ')
            assignee=$(echo "$issue" | jq -r '.assignee')
            github_username="${USER_MAP[$assignee]}"

            # Set GitHub assignees
            assignees_json="[]"
            if [[ -n "$github_username" ]]; then
              assignees_json=$(jq -n --arg u "$github_username" '[ $u ]')
            fi

            # GitHub issue title includes Jira key
            github_title="[$jira_key] $title"

            existing_issue=$(gh issue list --repo "$REPO" --search "$jira_key" --state "all" --json number,title | jq -r ".[] | select(.title | contains(\"[$jira_key]\")) | .number")

            if [[ -n "$existing_issue" ]]; then
              echo "⚠️ Issue [$jira_key] already exists in GitHub as #$existing_issue. Skipping creation."
              continue
            fi

            echo "Creating GitHub issue for: $github_title"

            issue_payload=$(jq -n \
              --arg title "$github_title" \
              --arg body "🔗 Jira issue: https://$JIRA_DOMAIN/browse/$jira_key\n\n### Jira: $jira_key\n\n**Description**: $body\n\n**Due**: $due_date\n**Input**: $input\n**Output**: $output\n**Team**: $team\n**Priority**: $priority" \
              --argjson assignees "$assignees_json" \
              '{title: $title, body: $body, assignees: $assignees}')


            issue_response=$(curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/$REPO/issues \
              -d "$issue_payload")

            issue_node_id=$(echo "$issue_response" | jq -r '.node_id')
            issue_url=$(echo "$issue_response" | jq -r '.html_url')
            
            if [[ "$issue_node_id" == "null" || -z "$issue_node_id" ]]; then
              echo "⚠️ Failed to create GitHub issue for $jira_key"
              continue
            fi
            
            echo "✅ Created GitHub issue: $issue_url"
            
            # ➕ Add comment to Jira with backlink to GitHub issue
            jira_comment_url="https://$JIRA_DOMAIN/rest/api/3/issue/$jira_key/comment"
            jira_payload=$(jq -n \
              --arg text "🔗 Linked GitHub issue: $issue_url" \
              '{
                body: {
                  type: "doc",
                  version: 1,
                  content: [
                    {
                      type: "paragraph",
                      content: [
                        {
                          type: "text",
                          text: $text
                        }
                      ]
                    }
                  ]
                }
              }')
            
            curl -s -X POST \
              -H "Authorization: Basic $(echo -n "$JIRA_USER:$JIRA_API_TOKEN" | base64)" \
              -H "Content-Type: application/json" \
              --data "$jira_payload" \
              "$jira_comment_url"
            
            echo "🧷 Jira issue $jira_key linked back to GitHub"


            if [[ "$issue_node_id" == "null" || -z "$issue_node_id" ]]; then
              echo "⚠️ Failed to create GitHub issue for $jira_key"
              continue
            fi

            echo "✅ Created GitHub issue: $issue_url"

            item_id=$(gh api graphql -f query='
              mutation($projectId:ID!, $contentId:ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item { id }
                }
              }' -F projectId="$PROJECT_ID" -F contentId="$issue_node_id" --jq '.data.addProjectV2ItemById.item.id')

            if [[ -z "$item_id" || "$item_id" == "null" ]]; then
              echo "❌ Failed to add issue to project. Skipping."
              continue
            fi

            status_option_id="${STATUS_MAP[$status]}"
            if [[ -z "$status_option_id" ]]; then
              echo "⚠️ No valid status mapping for '$status'. Skipping status update."
              continue
            fi

            echo "🔍 Debugging GitHub project update:"
            echo "  Project ID: $PROJECT_ID"
            echo "  Item ID: $item_id"
            echo "  Status Field ID: $STATUS_FIELD_ID"
            echo "  Status Option ID: $status_option_id"

            echo "🧪 Trying to set status for item $item_id to '$status' → option_id $status_option_id"

            update_status_response=$(gh api graphql --silent -f query='
              mutation (
                $project: ID!
                $item: ID!
                $status_field: ID!
                $status_value: String!
              ) {
                set_status: updateProjectV2ItemFieldValue(input: {
                  projectId: $project
                  itemId: $item
                  fieldId: $status_field
                  value: {
                    singleSelectOptionId: $status_value
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }' \
              -f project="$PROJECT_ID" \
              -f item="$item_id" \
              -f status_field="$STATUS_FIELD_ID" \
              -f status_value="$status_option_id" 2>&1 || true)


            echo "GraphQL raw response:"
            echo "$update_status_response" | jq .

            
            if [[ $? -ne 0 || -z "$update_status_response" || "$update_status_response" == *"errors"* ]]; then
              echo "⚠️ Failed to update status for item $item_id. Skipping."
              echo "🔴 Error details: $update_status_response"
              continue
            fi
            
            echo "✅ Status set to '$status'"

          done
        shell: bash {0}
