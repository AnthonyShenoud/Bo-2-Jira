name: Sync Jira Issues to GitHub

on:
  workflow_dispatch:

jobs:
  sync-jira:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install jq and GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Authenticate GitHub CLI
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
        run: |
          echo "$GH_PERSONAL_ACCESS_TOKEN" | gh auth login --with-token

      - name: Fetch Jira Issues
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_DOMAIN: "anthonyashenouda.atlassian.net"
          JIRA_PROJECT_KEY: "SCRUM"
          JIRA_USER: "anthony.ashenouda@gmail.com"
        run: |
          echo "Fetching Jira issues..."
          response=$(curl -s -X GET -u "$JIRA_USER:$JIRA_API_TOKEN" \
            -H "Accept: application/json" \
            "https://$JIRA_DOMAIN/rest/api/2/search?jql=project=$JIRA_PROJECT_KEY")

          echo "$response" | jq '[.issues[] | {
            id: .id,
            key: .key,
            title: .fields.summary,
            body: (.fields.description // "No Description"),
            due_date: (.fields.duedate // "No Due Date"),
            input: (.fields.customfield_10039 // "No Input"),
            output: (.fields.customfield_10040 // "No Output"),
            priority: (.fields.priority.name // "No Priority"),
            team: (.fields.team.name // "No Team"),
            status: (.fields.status.name // "No Status"),
            assignee: (.fields.assignee.accountId // "Unassigned")
          }]' > jira_issues.json

      - name: Debug Jira JSON Content
        run: cat jira_issues.json

      - name: Create GitHub Issues
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          REPO: "AnthonyShenoud/Bo-2-Jira"
          PROJECT_ID: "PVT_kwHOBF3sMs4A1ZhT"
          STATUS_FIELD_ID: "PVTSSF_lAHOBF3sMs4A1ZhTzgq4Do0"
        run: |
          declare -A STATUS_MAP=(
            ["backlog"]="f75ad846"      # GitHub "Backlog"
            ["ready"]="61e4505c"        # GitHub "Ready"
            ["todo"]="61e4505c"         # Jira "To Do" ‚Üí "Ready"
            ["to do"]="61e4505c"
            ["in progress"]="47fc9ee4"  # GitHub "In progress"
            ["inprogress"]="47fc9ee4"
            ["In Review"]="df73e18b"    # GitHub "In review"
            ["inreview"]="df73e18b"
            ["review"]="df73e18b"
            ["done"]="98236657"         # GitHub "Done"
            ["closed"]="98236657"
            ["resolved"]="98236657"
          )

          declare -A USER_MAP=(
            ["712020:adc4902f-4b9b-4ee1-a517-5d24a6fd51a6"]="AnthonyShenoud"
            ["712020:b41cbe18-4f26-468d-a2c0-8a4331eef3a1"]="TintinShenouda"
            ["712020:9c9704fc-f1a0-49c9-9f9e-3bf543da02c7"]="MariaCampagnolo"
          )

          jq -c '.[]' jira_issues.json | while read -r issue; do
            title=$(echo "$issue" | jq -r '.title')
            body=$(echo "$issue" | jq -r '.body')
            jira_key=$(echo "$issue" | jq -r '.key')
            due_date=$(echo "$issue" | jq -r '.due_date')
            input=$(echo "$issue" | jq -r '.input')
            output=$(echo "$issue" | jq -r '.output')
            team=$(echo "$issue" | jq -r '.team')
            priority=$(echo "$issue" | jq -r '.priority')
            status=$(echo "$issue" | jq -r '.status')
            assignee=$(echo "$issue" | jq -r '.assignee')

            github_username="${USER_MAP[$assignee]}"
            assignees_json="[]"
            if [[ -n "$github_username" ]]; then
              assignees_json=$(jq -n --arg u "$github_username" '[ $u ]')
            fi

            echo "üîç Jira assignee email: $assignee"
            echo "üîó Mapped GitHub username: $github_username"

            echo "Creating issue for: $jira_key ($title)"

            issue_payload=$(jq -n \
              --arg title "$title" \
              --arg body "### Jira: $jira_key\n\n**Description**: $body\n\n**Due**: $due_date\n**Input**: $input\n**Output**: $output\n**Team**: $team\n**Priority**: $priority" \
              --argjson assignees "$assignees_json" \
              '{title: $title, body: $body, assignees: $assignees}')

            issue_response=$(curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/$REPO/issues \
              -d "$issue_payload")


            echo "GitHub API response: $issue_response"

            issue_node_id=$(echo "$issue_response" | jq -r '.node_id')
            issue_url=$(echo "$issue_response" | jq -r '.html_url')

            if [[ "$issue_node_id" == "null" || -z "$issue_node_id" ]]; then
              echo "‚ö†Ô∏è Failed to create GitHub issue for $jira_key"
              continue
            fi

            echo "‚úÖ Created issue: $issue_url"

            item_id=$(gh api graphql -f query='
              mutation($projectId:ID!, $contentId:ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item { id }
                }
              }' -F projectId="$PROJECT_ID" -F contentId="$issue_node_id" --jq '.data.addProjectV2ItemById.item.id')

            echo "üì¶ Added to project. Item ID: $item_id"

            status_option_id="${STATUS_MAP[$status]}"
            if [[ -z "$status_option_id" ]]; then
              echo "‚ö†Ô∏è No valid status mapping for '$status'. Skipping status update."
              continue
            fi

            gh api graphql --silent -f query='
              mutation($input: UpdateProjectV2ItemFieldValueInput!) {
                updateProjectV2ItemFieldValue(input: $input) {
                  projectV2Item {
                    id
                  }
                }
              }' \
              -f input.projectId="$PROJECT_ID" \
              -f input.itemId="$item_id" \
              -f input.fieldId="$STATUS_FIELD_ID" \
              -f input.value.singleSelectOptionId="$status_option_id" || {
                echo "‚ö†Ô∏è Failed to update status for item $item_id. Skipping."
                continue
              }

            echo "‚úÖ Status set to $status"
          done
