name: Sync Jira Issues to GitHub

on:
  #schedule:
  #  - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:  # Allows manual trigger

jobs:
  sync-jira:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Fetch Jira Issues
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_DOMAIN: "anthonyashenouda.atlassian.net"
          JIRA_PROJECT_KEY: "SCRUM"
          JIRA_USER: "anthony.ashenouda@gmail.com"
        run: |
          echo "Fetching issues from Jira..."
          response=$(curl -X GET -u "$JIRA_USER:$JIRA_API_TOKEN" \
            -H "Accept: application/json" \
            "https://$JIRA_DOMAIN/rest/api/2/search?jql=project=$JIRA_PROJECT_KEY")
          
          echo "Raw Jira response: $response"  # Debug output
          echo "$response" | jq '[.issues[] | {
            id: .id,
            key: .key,
            title: .fields.summary,
            body: .fields.description,
            due_date: .fields.duedate,
            input: .fields.customfield_10039,
            output: .fields.customfield_10040,
            priority: .fields.priority.name,
            team: (.fields.team.name // "No Team")
          }]' > jira_issues.json
            
      - name: Debug Jira Issues JSON Content
        run: |
          echo "Checking JSON File Content..."
          cat jira_issues.json
          jq type jira_issues.json

      - name: Debug Add to Project Input
        run: |
          echo "Content ID (input): $input"

      - name: Create GitHub Issues
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          REPO: "AnthonyShenoud/Bo-2-Jira"
        run: |
          jq -c '.[]' jira_issues.json | while read issue; do
              title=$(echo $issue | jq -r '.title')
              body=$(echo $issue | jq -r '.body')
              jira_key=$(echo $issue | jq -r '.key')
              due_date=$(echo $issue | jq -r '.due_date')
              input=$(echo $issue | jq -r '.input')
              output=$(echo $issue | jq -r '.output')
              team=$(echo $issue | jq -r '.team')
              priority=$(echo $issue | jq -r '.priority')
      
              response=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/$REPO/issues \
                -d "{
                  \"title\": \"$title\",
                  \"body\": \"### Jira Issue: $jira_key\\n\\n**Description:** $body\\n\\n**Due Date:** $due_date\\n\\n**Input:** $input\\n\\n**Output:** $output\\n\\n**Team:** $team\\n\\n**Priority:** $priority\"
                }")
      
              issue_url=$(echo $response | jq -r '.html_url')
      
              if [[ "$issue_url" == "null" || -z "$issue_url" ]]; then
                echo "Error: Issue URL is null or empty. Check issue creation step."
                exit 1
              fi
      
              echo "$issue_url" >> github_issues.txt
          done

      
      - name: Add GitHub Issues to Project
        run: |
          while read issue_url; do
            echo "Adding issue $issue_url to project..."
            gh project item-add 2 --owner "AnthonyShenoud" --url "$issue_url"
          done < github_issues.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}



